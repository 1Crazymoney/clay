import mock
from threading import Thread

from golem.tools.testwithdatabase import TestWithDatabase
from golem.ranking.ranking import Ranking, RankingDatabase, RankingStats
from golem.client import Client


class TestRankingDatabase(TestWithDatabase):
    def test_increase_trust_thread_safety(self):
        c = mock.MagicMock(spec=Client)
        r = Ranking(c)
        def run():
            for x in range(0, 10):
                r.increase_trust("ABC", RankingStats.computed, 1)
                r.decrease_trust("ABC", RankingStats.computed, 1)
                r.increase_trust("ABC", RankingStats.computed, 1)
        thread1 = Thread(target=run)
        thread1.start()
        thread1.join()
        expected = r.get_computing_trust("ABC")
        thread1 = Thread(target=run)
        thread1.start()
        thread2 = Thread(target=run)
        thread2.start()
        thread3 = Thread(target=run)
        thread3.start()
        thread4 = Thread(target=run)
        thread4.start()
        thread1.join()
        thread2.join()
        thread3.join()
        thread4.join()
        self.assertEqual(0.0, expected)

    def test_local_rank(self):
        self.assertIsNone(RankingDatabase.get_local_rank("ABC"))
        RankingDatabase.increase_positive_computing("ABC", 2)
        lr = RankingDatabase.get_local_rank("ABC")
        self.assertIsNotNone(lr)
        self.assertEqual(lr.positive_computed, 2)
        RankingDatabase.increase_positive_computing("ABC", 3.5)
        RankingDatabase.increase_negative_computing("DEF", 1.1)
        RankingDatabase.increase_negative_computing("DEF", 1.2)
        lr = RankingDatabase.get_local_rank("ABC")
        self.assertEqual(lr.positive_computed, 5.5)
        self.assertEqual(lr.negative_computed, 0.0)
        lr = RankingDatabase.get_local_rank("DEF")
        self.assertEqual(lr.positive_computed, 0)
        self.assertEqual(lr.negative_computed, 2.3)
        RankingDatabase.increase_wrong_computed("DEF", 10.0)
        RankingDatabase.increase_wrong_computed("ABC", 3.0)
        RankingDatabase.increase_wrong_computed("ABC", 0.2)
        RankingDatabase.increase_positive_requested("ABC", 3.0)
        RankingDatabase.increase_positive_requested("ABC", 1.1)
        RankingDatabase.increase_negative_requested("ABC", 1.9)
        RankingDatabase.increase_negative_requested("ABC", 0.1)
        RankingDatabase.increase_positive_payment("DEF", 1)
        RankingDatabase.increase_negative_payment("DEF", 2)
        RankingDatabase.increase_positive_payment("DEF", 3)
        RankingDatabase.increase_negative_payment("DEF", 5)
        RankingDatabase.increase_positive_resource("XYZ", 7)
        RankingDatabase.increase_negative_resource("XYZ", 0.4)

        lr = RankingDatabase.get_local_rank("DEF")
        self.assertEqual(lr.wrong_computed, 10.0)
        self.assertEqual(lr.positive_requested, 0.0)
        self.assertEqual(lr.negative_requested, 0)
        self.assertEqual(lr.positive_payment, 4)
        self.assertEqual(lr.negative_payment, 7)
        lr = RankingDatabase.get_local_rank("ABC")
        self.assertEqual(lr.wrong_computed, 3.2)
        self.assertEqual(lr.positive_requested, 4.1)
        self.assertEqual(lr.negative_requested, 2.0)
        self.assertEqual(lr.positive_payment, 0)
        self.assertEqual(lr.negative_payment, 0)
        self.assertEqual(lr.positive_resource, 0)
        self.assertEqual(lr.negative_resource, 0)
        lr = RankingDatabase.get_local_rank("XYZ")
        self.assertEqual(lr.positive_resource, 7)
        self.assertEqual(lr.negative_resource, 0.4)

    def test_global_rank(self):
        self.assertIsNone(RankingDatabase.get_global_rank("ABC"))
        RankingDatabase.insert_or_update_global_rank("ABC", 0.3, 0.2, 1.0, 1.0)
        RankingDatabase.insert_or_update_global_rank("DEF", -0.1, -0.2, 0.9, 0.8)
        RankingDatabase.insert_or_update_global_rank("ABC", 0.4, 0.1, 0.8, 0.7)
        gr = RankingDatabase.get_global_rank("ABC")
        self.assertEqual(gr.computing_trust_value, 0.4)
        self.assertEqual(gr.requesting_trust_value, 0.1)
        self.assertEqual(gr.gossip_weight_computing, 0.8)
        self.assertEqual(gr.gossip_weight_requesting, 0.7)
        gr = RankingDatabase.get_global_rank("DEF")
        self.assertEqual(gr.computing_trust_value, -0.1)
        self.assertEqual(gr.requesting_trust_value, -0.2)
        self.assertEqual(gr.gossip_weight_computing, 0.9)
        self.assertEqual(gr.gossip_weight_requesting, 0.8)

    def test_neighbour_rank(self):
        self.assertIsNone(RankingDatabase.get_neighbour_loc_rank("ABC", "DEF"))
        RankingDatabase.insert_or_update_neighbour_loc_rank("ABC", "DEF", (0.2, 0.3))
        nr = RankingDatabase.get_neighbour_loc_rank("ABC", "DEF")
        self.assertEqual(nr.node_id, "ABC")
        self.assertEqual(nr.about_node_id, "DEF")
        self.assertEqual(nr.computing_trust_value, 0.2)
        self.assertEqual(nr.requesting_trust_value, 0.3)
        RankingDatabase.insert_or_update_neighbour_loc_rank("DEF", "ABC", (0.5, -0.2))
        RankingDatabase.insert_or_update_neighbour_loc_rank("ABC", "DEF", (-0.3, 0.9))
        nr = RankingDatabase.get_neighbour_loc_rank("ABC", "DEF")
        self.assertEqual(nr.node_id, "ABC")
        self.assertEqual(nr.about_node_id, "DEF")
        self.assertEqual(nr.computing_trust_value, -0.3)
        self.assertEqual(nr.requesting_trust_value, 0.9)
        nr = RankingDatabase.get_neighbour_loc_rank("DEF", "ABC")
        self.assertEqual(nr.node_id, "DEF")
        self.assertEqual(nr.about_node_id, "ABC")
        self.assertEqual(nr.computing_trust_value, 0.5)
        self.assertEqual(nr.requesting_trust_value, -0.2)
