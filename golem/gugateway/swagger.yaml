swagger: '2.0'
info:
  description: Golem Brass Gateway API for Golem Unlimited
  version: 1.0.0
  title: Golem Gateway API
  license:
    name: GPL 3.0
    url: 'https://www.gnu.org/licenses/gpl-3.0.html'
host: 127.0.0.1:55001
schemes:
  - https
paths:
  '/subscriptions/{nodeId}':
    parameters:
      - $ref: '#/parameters/nodeId'
    post:
      summary: Creates or amends subscription to Golem network
      operationId: subscribe
      parameters:
        - name: body
          in: body
          description: Subscription spec
          required: true
          schema:
            $ref: '#/definitions/SubscribeRequest'
      responses:
        '200':
          description: subscription amended (supported taskTypes changed)
        '201':
          description: subscription created
        '405':
          description: invalid input
    get:
      summary: Gets subscription status
      operationId: subscription
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SubscriberStatus'
        '404':
          description: subscription not found
    delete:
      summary: Removes subscription
      operationId: unsubscribe
      responses:
        '200':
          description: subscription deleted
        '404':
          description: subscription not found
  '/{nodeId}/tasks/{taskId}':
    parameters:
      - $ref: '#/parameters/nodeId'
      - $ref: '#/parameters/taskId'
    post:
      summary: Sends task computation willingness
      operationId: wantToComputeTask
      responses:
        '200':
          description: subtask to compute
          schema:
            $ref: '#/definitions/Subtask'
    get:
      summary: Gets task information
      operationId: taskInfo
      responses:
        '200':
          description: task definition
          schema:
            $ref: '#/definitions/Task'
        '404':
          description: not found
  '/{nodeId}/subtasks/{subtaskId}':
    parameters:
      - $ref: '#/parameters/nodeId'
      - $ref: '#/parameters/subtaskId'
    put:
      summary: Confirms subtask computation start
      operationId: confirmSubtask
      responses:
        '200':
          description: OK
        '404':
          description: not found
    get:
      summary: Gets subtask information
      operationId: subtaskInfo
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Subtask'
        '404':
          description: not found
    post:
      summary: Reports subtask computation result
      description: >
        In case of successful computation caller need upload resource
        with subtask outputs first, and supply obtained resourceId here.

        Reason is supplied only in case of failure.
      operationId: subtaskResult
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SubtaskResult'
      responses:
        '200':
          description: OK
        '404':
          description: not found
        '410':
          description: subtask timed out
  '/{nodeId}/subtasks/{subtaskId}/cancel':
    parameters:
      - $ref: '#/parameters/nodeId'
      - $ref: '#/parameters/subtaskId'
    post:
      summary: Cancels subtask computation (upon failure or resignation)
      operationId: cancelSubtask
      responses:
        '200':
          description: OK
        '404':
          description: not found
  '/{nodeId}/resources':
    parameters:
      - $ref: '#/parameters/nodeId'
    post:
      summary: Receives a resource file from a caller
      operationId: uploadResource
      consumes:
        - multipart/form-data
      parameters:
        - name: metadata
          type: string
          in: formData
          required: false
          description: file metadata
        - name: file
          type: file
          in: formData
          required: true
          description: file to upload
      responses:
        '201':
          description: resource created
          schema:
            $ref: '#/definitions/Resource'
        '404':
          description: subscription not found
        '405':
          description: invalid input
  '/{nodeId}/resources/{resourceId}':
    parameters:
      - $ref: '#/parameters/nodeId'
      - $ref: '#/parameters/resourceId'
    get:
      summary: Sends a binary resource to a caller
      operationId: downloadResource
      produces:
        - application/zip
      responses:
        '200':
          description: A zipped resource file
          schema:
            type: file
        '404':
          description: not found
  '/{nodeId}/events':
    parameters:
      - $ref: '#/parameters/nodeId'
      - name: lastEventId
        in: query
        description: provide event id from previous call
        type: integer
        format: int64
    get:
      summary: List events for given node id; starting after last event id
      operationId: fetchEvents
      responses:
        '200':
          description: list of events from `lastEventId`
          schema:
            $ref: '#/definitions/Events'
parameters:
  nodeId:
    name: nodeId
    type: string
    in: path
    required: true
    minLength: 42
    maxLength: 42
    pattern: '0x[0-9a-f]{40}'
    description: >
      ethereum address identifying node e.g.,
      `0x1ca0fd52dd8d0abf3a577f5b4645806f774f2f7b`
  taskId:
    name: taskId
    type: string
    format: uuid
    in: path
    required: true
    pattern: '[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}'
  subtaskId:
    name: subtaskId
    type: string
    format: uuid
    in: path
    required: true
    pattern: '[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}'
  resourceId:
    name: resourceId
    type: string
    format: uuid
    in: path
    required: true
    pattern: '[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}'
definitions:
  SubscribeRequest:
    required:
      - taskType
    properties:
      taskType:
        type: string
        example: blender
  SubscriberStatus:
    required:
      - taskTypes
    properties:
      taskTypes:
        type: array
        items:
          type: string
      taskStats:
        properties:
          requested:
            type: integer
          succeded:
            type: integer
          failed:
            type: integer
          timedout:
            type: integer
  Task:
    description: >
      A basic unit of work requested in Golem Network.
      Upon computation it is divided into a smaller chunks - subtasks.
      Number of subtasks is defined by the requestor.
    required:
      - taskId
      - perfIndex
      - maxResourceSize
      - maxMemorySize
      - numCores
      - price
    properties:
      taskId:
        $ref: '#/parameters/taskId'
      perfIndex:
        type: number
        format: float
        example: 314
      maxResourceSize:
        type: integer
        format: int64
      maxMemorySize:
        type: integer
        format: int64
      numCores:
        type: integer
        format: int32
      price:
        type: integer
        format: int64
        description: per second of computation
    additionalProperties: true
  Subtask:
    description: >
      Subtask is a part of task supossed to be executed by a provider,
      which submited task computation willingness.
    required:
      - subtaskId
      - price
    properties:
      subtaskId:
        $ref: '#/parameters/subtaskId'
      description:
        type: string
      resource:
        $ref: '#/definitions/Resource'
      deadline:
        type: integer
        description: >
          timestamp when computation must be finished
          to be accepted by a requestor
      price:
        type: integer
        format: int64
        description: >
          total subtask price computed as `task_price * subtask_timeout`
    additionalProperties: true
  Resource:
    description: Binary content (files) required to execute subtask
    required:
      - resourceId
    properties:
      resourceId:
        $ref: '#/parameters/resourceId'
      metadata:
        type: string
  SubtaskResult:
    description: Subtask computation result
    required:
      - status
    properties:
      status:
        type: string
        enum:
          - success
          - failure
      reason:
        type: string
        description: failure reason
      resourceId:
        $ref: '#/parameters/resourceId'
  SubtaskVerification:
    description: Subtask verification result
    required:
      - subtaskId
      - verificationResult
    properties:
      subtaskId:
        $ref: '#/parameters/subtaskId'
      verificationResult:
        type: string
        enum:
          - OK
          - failed
          - timedout
  Events:
    description: >
      Table with trhee types of events.
      Every item has id and exactly one of remaining fields filled.
    type: array
    items:
      required:
        - eventId
      properties:
        eventId:
          type: integer
          format: int64
        task:
          $ref: '#/definitions/Task'
        resource:
          $ref: '#/definitions/Resource'
        subtaskVerification:
          $ref: '#/definitions/SubtaskVerification'
