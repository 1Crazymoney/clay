machine:
  node:
    version: 6.9.5
  python:
    version: 3.5.2
  services:
    - docker
  post:
    - pyenv global 3.5.2

checkout:
  post:
    - git submodule update --init

dependencies:
  override:
    - pip3 install -r requirements.txt
    - python3 setup.py develop
  pre:
    # geth
    - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
    - sudo add-apt-repository -y ppa:ethereum/ethereum && sudo apt-get update
    - sudo apt-get install -y qt5-default qtbase5-dev-tools geth

    # taskcollector
    - sudo apt-get install -y gcc-5 g++-5 libfreeimage3 libfreeimage-dev
    - make -C apps/rendering/resources/taskcollector


     # golem-hyperdrive
    - wget https://github.com/mfranciszkiewicz/golem-hyperdrive/releases/download/v0.2.1/hyperg_0.2.1_linux-x64.tar.gz
    - tar xvf hyperg_0.2.1_linux-x64.tar.gz
    - ./hyperg/hyperg:
        background: true
        
    # ipfs
    - if [ ! -e /usr/local/bin/ipfs ]; then wget https://dist.ipfs.io/go-ipfs/v0.4.5/go-ipfs_v0.4.5_linux-amd64.tar.gz; tar xvfz go-ipfs_v0.4.5_linux-amd64.tar.gz; sudo mv go-ipfs/ipfs /usr/local/bin/ipfs; /usr/local/bin/ipfs init; fi
    - /usr/local/bin/ipfs config --json Bootstrap "[]"
    - /usr/local/bin/ipfs config --json SupernodeRouting.Servers "[]"
    - /usr/local/bin/ipfs config --json Addresses.Swarm '["/ip6/::/tcp/4001", "/ip6/::/udp/4002/utp", "/ip4/0.0.0.0/udp/4002/utp"]'
    - /usr/local/bin/ipfs daemon:
        background: true

    # Slow tests only on develop and PR with >= 2 approvals
    - echo 'export PR_ID='${CIRCLE_PR_NUMBER} >> ~/.circlerc
    - echo 'export APPROVALS_REQ=2' >> ~/.circlerc
    - if [[ -z "${PR_ID}" ]]; then echo 'export PR_APPROVAL_COUNT='${APPROVALS_REQ} >> ~/.circlerc; fi
    - if [[ -n "${PR_ID}" ]]; then echo 'export PR_APPROVAL_COUNT='$(node scripts/github/get-approvals "${PR_ID}") >> ~/.circlerc; fi
    - if [[ ${PR_APPROVAL_COUNT} -ge ${APPROVALS_REQ} ]]; then echo 'export TEST_MODE=" --runslow"' >> ~/.circlerc; fi
    - echo "${PR_ID}"
    - echo "${PR_APPROVAL_COUNT}"
    - echo "${APPROVALS_REQ}"
    - echo "${TEST_MODE}"
    
    # requirements
    - pip3 install six
    - pip3 install -r requirements-lint.txt

test:
  pre:
    - pip3 install coverage codecov
  override:
    - python3 -m coverage run --branch --source=. setup.py test -a "--junitxml=${CIRCLE_TEST_REPORTS}/test_result.xml${TEST_MODE}":
        timeout: 1200
  post:
    - codecov
#    - [ -z "$TEST_MODE" ] && node scripts/github/set-status $PR_ID 'success'
